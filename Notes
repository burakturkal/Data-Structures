This calculates the execution time.
Every computer will have different execution time. That means, this is not a
good way to decide whether this algorithm or not. Instead, we need to check
the number of operations.

---

Two types of complexity:
1) Time complexity: number of steps taken by the algorithm,
measured with respect to n (input data to be processed), the size of the input.

2) Space complexity: amount of space needed to run the algorithm.

Generally, time complexity is preferred over space complexity because you
generally have enough space.

---

Big O Notation: Rate of Groth. How fast a function grows or declines.
It is a Big Picture approach. Allows us to ignore small components

2 Rules:
1) Always calculate the worst case scenario
2) Remove all constants

For example: 5n^4+3m^3+2n^2+4n+1 -> in this case it is O(n^4)

---

for(int i=0: i<n; i++){} -> O(n) because of i<n

++++++++++++++

for(int i=0: i<n; i++){
    for(int i2=0: i2<n; i++)
}                       -> O(n^2) because of n*n

++++++++++++++

x=x+1;                      -> 1
for(int i=0: i<n; i++){}    -> n
for(int i=0: i<n; i++){     -> n*n
    for(int i2=0: i2<n; i++)
}

Therefore it is O(n^2)

++++++++++++++

for(int i=0: i<n; i++){         -> n
    for(int i2=0: i2<m; i++)    -> m
}

Practically it's O(n*m) and we should say this in interview
But if n and m are very close to each other, we can say O(n^2)

++++++++++++++

for(int i=1; i<n; i*=2)         -> O(logn)
    int a + a + 1;


if() {

} else{

}



---

BigO -> Always looks at Worst Case
Omega -> Always looks at Best Case
Theta -> Always looks at Average Case

We only use BigO in data structures.

If the complexity of a program is O(n^2), then we say this is a Brute Force Code
and we will try to change it to logn or nlogn

